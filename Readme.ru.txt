== Основные понятия ==

=== Номер ревизии. ===

Можно назвать версией, но больше применимо к железякам.
Каждая ревизия, это конкретная железка, которая имеет 
определённую распайку. При написании прошивок (firmware),
в качестве совместимости указывается именно номер
ревизии для которой подойдёт эта прошивка.
Каждая ревизия может иметь версию. Номер 
версии в репозитории не пишется, потому-что 
нет необходимости в поддержки старых версий.
(FIXME -- написать это как то более внятно)

== Принцип разработки ==

Как любую программу, разработку LaserTag правильно
разделить на несколько частей:
* Аппаратура, т.е, принципиальные схемы, распайка и тп.
* Firmware, минимальное кол-во кода, которая работает с 
  конкретной аппаратурой.
* Модель, платформонезависимая часть, которая реализует
  основной функционал.

 Возможно, имеет смысл вынести протоколы передачи в отдельную
часть.

Проводить разработку "всё в одном" кране не рекомендуется.

== Общая структура репозитория ==

Структура каталога.

Проект делится на несколько основных частей.

== Железная часть ==

Каталог: circuts
Подкаталоги: ядро (например AVR или ARM), либо назначение
далее название(или автор) и номер ревизии(если есть), например:
* avr/asm
* arm/asm-hardcore
* tools/asm-detector

Принципиальные схемы, распайка и прочие железные части.

== Прошивка ==

Каталог: firmware
Подкаталоги: ядро (например AVR или ARM),
далее название(или автор) и номер версии, например:
avr/asm-0.1
arm/asm-hardcore-3.2

Представляет собой аппаратно зависимый код,
это программирование таймеров, обработка прерываний,
кодирование значений ножек и тп.

== Логическая модель ==

Каталог: logick 
Подкаталоги представляют собой название версии(или автора),
название проекта.
* asm
* asm-hardcore
* asm-simple

Платформа независимая часть, которая реализует основную 
логику работы. К примеру реализация протокола (на основе 
получения/передачи логических кодов)

== Тестирование моделей ==

Каталог:
* tests -- в каталоге логической модели
* doc -- в каталоге логической модели

Каждая модель должна представлять какой-то интерфейс,
который можно использовать в прошивки. Дополнительно
к интерфейсу должны быть две вещи:
* описание интерфейса;
* набор тестов для тестирования модели. 

== Эмуляторы ==

Каталог: emulators
Файлы: Readme.txt

Реализация эмулятора поведения, эмуляторы могут быть 
на разных уровнях, работать на уровне логической модели,
либо реализовывать всю аппаратуру.
Эмулятор должен иметь файл Readme, где должно быть описано
что конкретно он умеет эмулировать, примерное описание
как он это делает, примеры для запуска.

====================================
== Сборка и компиляция ===

Для сборки и компиляции необходимо использовать
систему сборки cmake. Программы которые работают
на инструментальной машине должны быть кроссплатформенными
и собираться минимум на двух видах ОС, 
например, на: GNU/Linux и Windows.

==================================
== Лицензии использования ===

Репозитории представляет из себя открытый проект, и 
все программы в нём должны придерживаться открытых лицензий.
Предлагается все программы делать совместимыми
с лицензиями GPLv2. Возможно использовать, например, LGPLv2,
BSDv2 и прочие.

===============================
== Программа ведения версий ==

Проект ведётся в системе версий git. Разрешено для
своего проекта использовать submodules.
Для ведения проектов очень рекомендуется использовать
структуру ветвления git flow.

Базовый набор правил и команд приведён в каталоге
doc файла git-rules.

==============================
== Выбор языков, комиляторов, правила кодирования ==

Язык программирования можно использовать любой, но
нужно не забывать, что программа не должна быть привязана
к какой-то технологии, которая будет мешать работать
с ней из под разных ОС. Так же должны быть свободны
компилятора и интерпретаторы, под которыми возможно запустить
скомпилировать эту программу.

В случае разработки под коммерческие компиляторы необходимо
убедится, что сборка будет успешно проходить под свободные
аналоги.

Правила кодирования представлены для разных языков. Все они
представлены в каталоге doc в файлах вида:
* Syntax-[язык].txt

== Разнообразная реклама ==

Каталог:
* advert -- в неё можно складывать разные картинки,
рекламные части и тп.

Способы именования каталогов и структура каталогов свободная.
